View(head(EF1))
EF1%>%group_by(`Alarm.Date.-.Year`, `Alarm.Date.-.Month.of.Year`)%>%summarise(cnt = n())
EF1%>%group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%summarise(cnt = n())%>%arrange
EF1%>%group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%summarise(cnt = n())%>%arrange(Month, Year)
YrMo<-EF1%>%group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%summarise(cnt = n())%>%arrange(Month, Year)
library(ggplto2)
library(ggplot2)
ggplot2(YrMo, aes(x=Year, y=cnt)) + geom_bar() + facet_wrap(Month)
ggplot(YrMo, aes(x=Year, y=cnt)) + geom_bar() + facet_wrap(Month)
ggplot(YrMo, aes(x=Year, y=cnt)) + geom_bar() + facet_wrap(Month ~ .)
ggplot(YrMo, aes(x=Year, y=cnt)) + geom_bar() + facet_wrap(Month ~)
ggplot(YrMo, aes(x=Year, y=cnt)) +
geom_bar() +
facet_wrap(Month)
#Test
ggplot(YrMo, aes(x=Year, y=cnt)) +
geom_bar() +
facet_wrap(~Month)
ggplot(YrMo, aes(x=Year, y=cnt)) +
geom_col() +
facet_wrap(~Month)
class(YrMo$Month)
args(factor)
YrMo$Month<-factor(Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Nov","Dec"))
YrMo$Month<-factor(YrMo$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Nov","Dec"))
ggplot(YrMo, aes(x=Year, y=cnt)) +
geom_col() +
facet_wrap(~Month)
ggplot(YrMo, aes(x=Year, y=cnt)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month)
#Test
ggplot(YrMo%>%filter(Year!=2018, GSM_FLAG =0), aes(x=Year, y=cnt)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month)
YrMo<-EF1%>%filter(GSM_FLAG = 0, `Alarm.Date.-.Year` != 2018)%>%group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%summarise(cnt = n())%>%arrange(Month, Year)
YrMo<-EF1%>%filter(GSM_FLAG = 0, `Alarm.Date.-.Year` != 2018)%>%group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%summarise(cnt = n())%>%arrange(Month, Year)
YrMo$Month<-factor(YrMo$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Nov","Dec"))
ggplot(YrMo%>%filter(Year!=2018, GSM_FLAG =0), aes(x=Year, y=cnt)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month)
ggplot(YrMo, aes(x=Year, y=cnt)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month)
YrMo<-EF1%>%filter(GSM_FLAG = 0, `Alarm.Date.-.Year` != 2018)%>%group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%summarise(cnt = n())%>%arrange(Month, Year)
YrMo$Month<-factor(YrMo$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Nov","Dec"))
ggplot(YrMo, aes(x=Year, y=cnt)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month)
table(EF1$GSM_FLAG)
YrMo<-EF1%>%filter(GSM_FLAG == 0, `Alarm.Date.-.Year` != 2018)%>%group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%summarise(cnt = n())%>%arrange(Month, Year)
YrMo$Month<-factor(YrMo$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Nov","Dec"))
ggplot(YrMo, aes(x=Year, y=cnt)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month)
ggplot(YrMo, aes(x=Year, y=cnt)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
YrMo<-EF1%>%filter(GSM_FLAG == 0, `Alarm.Date.-.Year` != 2018)%>%group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%summarise(Fires = n())%>%arrange(Month, Year)
YrMo$Month<-factor(YrMo$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Nov","Dec"))
ggplot(YrMo, aes(x=Year, y=Fires)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
YrMo<-EF1%>%filter(GSM_FLAG == 0, `Alarm.Date.-.Year` != 2018, !is.na(`Alarm.Date.-.Month.of.Year`))%>%group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%summarise(Fires = n())%>%arrange(Month, Year)
YrMo$Month<-factor(YrMo$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Nov","Dec"))
ggplot(YrMo, aes(x=Year, y=Fires)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
table(EF1$`Alarm.Date.-.Month.of.Year`)
YrMo$Month<-factor(YrMo$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
ggplot(YrMo, aes(x=Year, y=Fires)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
YrMo<-EF1%>%filter(GSM_FLAG == 0, `Alarm.Date.-.Year` != 2018, !is.na(`Alarm.Date.-.Month.of.Year`))%>%group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%summarise(Fires = n())%>%arrange(Month, Year)
YrMo$Month<-factor(YrMo$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
ggplot(YrMo, aes(x=Year, y=Fires)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
table(EF1$`Property.Use.Code.(National)`)
YrMo<-EF1%>%filter(GSM_FLAG == 0, `Alarm.Date.-.Year` != 2018, !is.na(`Alarm.Date.-.Month.of.Year`, `Property.Use.Code.(National)` >=400, `Property.Use.Code.(National)`< 500))%>%
group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%
summarise(Fires = n())%>%arrange(Month, Year)
YrMo$Month<-factor(YrMo$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
ggplot(YrMo, aes(x=Year, y=Fires)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
YrMo<-EF1%>%filter(GSM_FLAG == 0, `Alarm.Date.-.Year` != 2018, !is.na(`Alarm.Date.-.Month.of.Year`, `Property.Use.Code.(National)` >=400, `Property.Use.Code.(National)`< 500))%>%
group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%
summarise(Fires = n())%>%arrange(Month, Year)
YrMo<-EF1%>%filter(GSM_FLAG == 0, `Alarm.Date.-.Year` != 2018, `Property.Use.Code.(National)` >=400, `Property.Use.Code.(National)`< 500)%>%
group_by(Year=`Alarm.Date.-.Year`, Month=`Alarm.Date.-.Month.of.Year`)%>%
summarise(Fires = n())%>%arrange(Month, Year)
YrMo$Month<-factor(YrMo$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
ggplot(YrMo, aes(x=Year, y=Fires)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(YrMo, aes(x=Year, y=Fires)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month) +
theme(axis.text.x = element_text(angle = 90, hjust = 1),title = "Residential Structure Fires by Month and Year")
ggplot(YrMo, aes(x=Year, y=Fires)) +
geom_col() +
facet_wrap(~Month) +
aes(fill = Month) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ggtitle("Residential Structure Fires by Month and Year")
rm(list=ls())
gc()
source("Install.R")
getwd()
setwd("C:/KaggleTest/Input")
train <- read_csv('./input/train.csv')
test  <- read_csv('./input/test.csv')
source("Install.R")
ls()
list.files()
setwd(.)
setwd("."
)
getwd()
setwd(".."
)
getwd*()
getwd()
source("Install.R")
Install(c(
#Data Wrangling
"tidyverse",
"forcats",
"stringr",
"caTools",
#data assessment/visualizations
"DT",
"data.table",
"pander",
"ggplot2",
"scales",
"grid",
"gridExtra",
"corrplot",
"VIM",
"knitr",
"vcd",
"caret",
#model
"xgboost",
"MLmetrics",
"randomForest",
"rpart",
"rpart.plot",
"car",
"e1071",
"ROCR",
"pROC",
"glemnet"))
warnings()
full <- full %>%
mutate(
Age = ifelse(is.na(Age), mean(full$Age, na.rm=TRUE), Age),
`Age Group` = case_when(Age < 13 ~ "Age.0012",
Age >= 13 & Age < 18 ~ "Age.1317",
Age >= 18 & Age < 60 ~ "Age.1859",
Age >= 60 ~ "Age.60Ov"))
train <- read_csv('./input/train.csv')
test  <- read_csv('./input/test.csv')
train$set <- "train"
test$set  <- "test"
test$Survived <- NA
full <- rbind(train, test)
str(full)
dim(full)
lapply(full, function(x) length(unique(x)))
missing_values<-full%>%summarise_all(funs(sum(is.na(.))/n()))
missing_values <- gather(missing_values, key="feature", value="missing_pct")
missing_values %>%
ggplot(aes(x=reorder(feature,-missing_pct),y=missing_pct)) +
geom_bar(stat="identity",fill="red")+
coord_flip()+theme_bw()
#Useful data quality function for missing values
checkColumn = function(df,colname){
testData = df[[colname]]
numMissing = max(sum(is.na(testData)|is.nan(testData)|testData==''),0)
if (class(testData) == 'numeric' | class(testData) == 'Date' | class(testData) == 'difftime' | class(testData) == 'integer'){
list('col' = colname,'class' = class(testData), 'num' = length(testData) - numMissing, 'numMissing' = numMissing, 'numInfinite' = sum(is.infinite(testData)), 'avgVal' = mean(testData,na.rm=TRUE), 'minVal' = round(min(testData,na.rm = TRUE)), 'maxVal' = round(max(testData,na.rm = TRUE)))
} else{
list('col' = colname,'class' = class(testData), 'num' = length(testData) - numMissing, 'numMissing' = numMissing, 'numInfinite' = NA,  'avgVal' = NA, 'minVal' = NA, 'maxVal' = NA)
}
}
checkAllCols = function(df){
resDF = data.frame()
for (colName in names(df)){
resDF = rbind(resDF,as.data.frame(checkColumn(df=df,colname=colName)))
}
resDF
}
datatable(checkAllCols(full), style="bootstrap", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))
miss_pct <- map_dbl(full, function(x) { round((sum(is.na(x)) / length(x)) * 100, 1) })
miss_pct <- miss_pct[miss_pct > 0]
data.frame(miss=miss_pct, var=names(miss_pct), row.names=NULL) %>%
ggplot(aes(x=reorder(var, -miss), y=miss)) +
geom_bar(stat='identity', fill='red') +
labs(x='', y='% missing', title='Percent missing data by feature') +
theme(axis.text.x=element_text(angle=90, hjust=1))
#Replace missing Age cells with the mean Age of all passengers on the Titanic.
full <- full %>%
mutate(
Age = ifelse(is.na(Age), mean(full$Age, na.rm=TRUE), Age),
`Age Group` = case_when(Age < 13 ~ "Age.0012",
Age >= 13 & Age < 18 ~ "Age.1317",
Age >= 18 & Age < 60 ~ "Age.1859",
Age >= 60 ~ "Age.60Ov"))
View(full)
table(full$Embarked)
is.na(full$Embarked)
#Use the most common code to replace NAs in the Embarked feature.
full$Embarked <- replace(full$Embarked, which(is.na(full$Embarked)), 'S')
#Extract an individualâ€™s title from the Name feature.
names <- full$Name
names
title <-  gsub("^.*, (.*?)\\..*$", "\\1", names)
title
names
full$title<-title
full$title[full$title == 'Mlle']        <- 'Miss'
full$title[full$title == 'Ms']          <- 'Miss'
full$title[full$title == 'Mme']         <- 'Mrs'
full$title[full$title == 'Lady']          <- 'Miss'
full$title[full$title == 'Dona']          <- 'Miss'
## I am afraid creating a new varible with small data can causes a overfit
## However, My thinking is that combining below feauter into original variable may loss some predictive power as they are all army folks, doctor and nobel peoples
full$title[full$title == 'Capt']        <- 'Officer'
full$title[full$title == 'Col']        <- 'Officer'
full$title[full$title == 'Major']   <- 'Officer'
full$title[full$title == 'Dr']   <- 'Officer'
full$title[full$title == 'Rev']   <- 'Officer'
full$title[full$title == 'Don']   <- 'Officer'
full$title[full$title == 'Sir']   <- 'Officer'
full$title[full$title == 'the Countess']   <- 'Officer'
full$title[full$title == 'Jonkheer']   <- 'Officer'
View(Full)
View(full)
full$FamilySize <-full$SibSp + full$Parch + 1
full$FamilySized[full$FamilySize == 1] <- 'Single'
full$FamilySized[full$FamilySize < 5 & full$FamilySize >= 2] <- 'Small'
full$FamilySized[full$FamilySize >= 5] <- 'Big'
full$FamilySized=as.factor(full$FamilySized)
View(full)
rep(0, nrow(full))
full$Ticket
unique(full$Ticket)
##Engineer features based on all the passengers with the same ticket
ticket.unique <- rep(0, nrow(full))
tickets <- unique(full$Ticket)
ticket.unique
tickets
for (i in 1:length(tickets)) {
current.ticket <- tickets[i]
party.indexes <- which(full$Ticket == current.ticket)
for (k in 1:length(party.indexes)) {
ticket.unique[party.indexes[k]] <- length(party.indexes)
}
}
party.indexes
ticket.unique
table(ticket.unique)
full$ticket.unique <- ticket.unique
full$ticket.size[full$ticket.unique >= 5]   <- 'Big'
full$ticket.size[full$ticket.unique == 1]   <- 'Single'
full$ticket.size[full$ticket.unique < 5 & full$ticket.unique>= 2]   <- 'Small'
full$ticket.size[full$ticket.unique >= 5]   <- 'Big'
full <- full %>%
mutate(Survived = case_when(Survived==1 ~ "Yes",
Survived==0 ~ "No"))
crude_summary <- full %>%
filter(set=="train") %>%
select(PassengerId, Survived) %>%
group_by(Survived) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
crude_survrate <- crude_summary$freq[crude_summary$Survived=="Yes"]
kable(crude_summary, caption="2x2 Contingency Table on Survival.", format="markdown")
tbl_corr <- full %>%
filter(set=="train") %>%
select(-PassengerId, -SibSp, -Parch) %>%
select_if(is.numeric) %>%
cor(use="complete.obs") %>%
corrplot.mixed(tl.cex=0.85)
tbl_mosaic <- full %>%
filter(set=="train") %>%
select(Survived, Pclass, Sex, AgeGroup=`Age Group`, title, Embarked, `FamilySize`) %>%
mutate_all(as.factor)
mosaic(~Pclass+Sex+Survived, data=tbl_mosaic, shade=TRUE, legend=TRUE)
library(alluvial)
tbl_summary <- full %>%
filter(set=="train") %>%
group_by(Survived, Sex, Pclass, `Age Group`, title) %>%
summarise(N = n()) %>%
ungroup %>%
na.omit
alluvial(tbl_summary[, c(1:4)],
freq=tbl_summary$N, border=NA,
col=ifelse(tbl_summary$Survived == "Yes", "blue", "gray"),
cex=0.65,
ordering = list(
order(tbl_summary$Survived, tbl_summary$Pclass==1),
order(tbl_summary$Sex, tbl_summary$Pclass==1),
NULL,
NULL))
Install(alluvial)
tbl_summary <- full %>%
filter(set=="train") %>%
group_by(Survived, Sex, Pclass, `Age Group`, title) %>%
summarise(N = n()) %>%
ungroup %>%
na.omit
alluvial(tbl_summary[, c(1:4)],
freq=tbl_summary$N, border=NA,
col=ifelse(tbl_summary$Survived == "Yes", "blue", "gray"),
cex=0.65,
ordering = list(
order(tbl_summary$Survived, tbl_summary$Pclass==1),
order(tbl_summary$Sex, tbl_summary$Pclass==1),
NULL,
NULL))
#2.5.4.3 Alluvial Diagram
Install("alluvial")
tbl_summary <- full %>%
filter(set=="train") %>%
group_by(Survived, Sex, Pclass, `Age Group`, title) %>%
summarise(N = n()) %>%
ungroup %>%
na.omit
alluvial(tbl_summary[, c(1:4)],
freq=tbl_summary$N, border=NA,
col=ifelse(tbl_summary$Survived == "Yes", "blue", "gray"),
cex=0.65,
ordering = list(
order(tbl_summary$Survived, tbl_summary$Pclass==1),
order(tbl_summary$Sex, tbl_summary$Pclass==1),
NULL,
NULL))
feauter1<-full[1:891, c("Pclass", "title","Sex","Embarked","FamilySized","ticket.size")]
response <- as.factor(train$Survived)
feauter1$Survived=as.factor(train$Survived)
response
table(response)
?createDataPartition
set.seed(500)
ind=createDataPartition(feauter1$Survived,times=1,p=0.8,list=FALSE)
train_val=feauter1[ind,]
test_val=feauter1[-ind,]
ind
round(prop.table(table(train$Survived)*100),digits = 1)
?prop.table
prop.table(full$Pclass)
round(prop.table(table(train_val$Survived)*100),digits = 1)
round(prop.table(table(test_val$Survived)*100),digits = 1)
train_val[,-7]
train_val[,7]
set.seed(1234)
rf.1 <- randomForest(x = train_val[,-7],y=train_val[,7], importance = TRUE, ntree = 1000)
rf.1
length(train_val[,-7])
length(train_val[,7])
set.seed(1234)
rf.1 <- randomForest(x = train_val[,-7],y=train_val[,7], importance = TRUE, ntree = 1000)
set.seed(500)
ind=createDataPartition(feauter1$Survived,times=1,p=0.8,list=FALSE)
train_val=feauter1[ind,]
test_val=feauter1[-ind,]
rf.1 <- randomForest(x = train_val[,-7],y=train_val[,7], importance = TRUE, ntree = 1000)
set.seed(1234)
Model_DT=rpart(Survived~.,data=train_val,method="class")
rpart.plot(Model_DT,extra =  3,fallen.leaves = T)
set.seed(1234)
rf.1 <- randomForest(x = train_val[,-7],y=train_val[,7], importance = TRUE, ntree = 1000)
rf.1
?randomForest
length(train_val[,-7])
length(train_val[,7])
rf.1 <- randomForest(x = train_val[,-7],y=train_val[,7], importance = TRUE)#, ntree = 1000)
rf.1 <- randomForest(x = train_val[,-7],y=train_val[,7], importance = TRUE, ntree = 1000)
View(train_val[,-7])
View(train_val[,7])
lapply(train_val,class())
lapply(train_val,class
)
factor(length(train_val[,-7]))
factor(train_val[,-7])
col_names <- names(train_val)
train_val[col_names] <- lapply(train_val[col_names] , factor)
test_val[col_names] <- lapply(test_val[col_names] , factor)
rf.1 <- randomForest(x = train_val[,-7],y=train_val[,7], importance = TRUE, ntree = 1000)
lapply(train_val,class)
rf.1 <- randomForest(x = train_val[,-7],y=train_val[,7], importance = TRUE, ntree = 1000)
set.seed(1234)
Model_DT=rpart(Survived~.,data=train_val,method="class")
rpart.plot(Model_DT,extra =  3,fallen.leaves = T)
PRE_TDT=predict(Model_DT,data=train_val,type="class")
confusionMatrix(PRE_TDT,train_val$Survived)
#####Accuracy is 0.8375
####Not at all bad using Single tree and just 3 feauters
##There is chance of overfitting in Single tree, So I will go for cross validation using '10 fold techinque'
set.seed(1234)
cv.10 <- createMultiFolds(train_val$Survived, k = 10, times = 10)
# Control
ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 10,
index = cv.10)
train_val <- as.data.frame(train_val)
##Train the data
Model_CDT <- train(x = train_val[,-7], y = train_val[,7], method = "rpart", tuneLength = 30,
trControl = ctrl)
##Check the accurcay
##Accurcay using 10 fold cross validation of Single tree is 0.8139
##Seems Overfitted earlier using Single tree, there our accurcay rate is 0.83
# check the variable imporatnce, is it the same as in Single tree?
rpart.plot(Model_CDT$finalModel,extra =  3,fallen.leaves = T)
##Yes, there is no change in the imporatnce of variable
###Lets cross validate the accurcay using data that kept aside for testing purpose
PRE_VDTS=predict(Model_CDT$finalModel,newdata=test_val,type="class")
confusionMatrix(PRE_VDTS,test_val$Survived)
col_names <- names(train_val)
train_val[col_names] <- lapply(train_val[col_names] , factor)
test_val[col_names] <- lapply(test_val[col_names] , factor)
set.seed(1234)
rf.1 <- randomForest(x = train_val[,-7],y=train_val[,7], importance = TRUE, ntree = 1000)
rf.1
varImpPlot(rf.1)
View(full)
train_val[,4:5]
train_val1=train_val[,-4:-5]
test_val1=test_val[,-4:-5]
set.seed(1234)
rf.2 <- randomForest(x = train_val1[,-5],y=train_val1[,5], importance = TRUE, ntree = 1000)
rf.2
varImpPlot(rf.2)
set.seed(2348)
cv10_1 <- createMultiFolds(train_val1[,5], k = 10, times = 10)
# Set up caret's trainControl object per above.
ctrl_1 <- trainControl(method = "repeatedcv", number = 10, repeats = 10,
index = cv10_1)
set.seed(1234)
rf.5<- train(x = train_val1[,-5], y = train_val1[,5], method = "rf", tuneLength = 3,
ntree = 1000, trControl =ctrl_1)
rf.5
Model_DT
length(train_val)
nrow(train_val)
lapply(train_val, table)
train_val%>%group_by(title, survived)%>%summarise(count = n())
train_val%>%group_by(title, Survived)%>%summarise(count = n())
PRE_VDTS
names(test_val)
cbind(PRE_VDTS, test_val$%Survived)
class(PRE_VDTS)
cbind(PRE_VDTS,test_val$Survived)
cbind(as.character(PRE_VDTS),as.character(test_val$Survived))
cbind(as.numeric(as.character(PRE_VDTS)),as.numeric(as.character(test_val$Survived)))
cbind(as.numeric(as.character(test_val$Survived)),as.numeric(as.character(PRE_VDTS)))
testdf<-cbind(as.numeric(as.character(test_val$Survived)),as.numeric(as.character(PRE_VDTS)))
View(testdf)
testdf<-cbind(Test_Data=as.numeric(as.character(test_val$Survived)),Pred_Data=as.numeric(as.character(PRE_VDTS)))
View(testdf)
testdf%>%mutate(accurate = abs(Test_Data - Pred_Data))
as.data.frame(testdf)%>%mutate(accurate = abs(Test_Data - Pred_Data))
testdf<-as.data.frame(testdf)%>%mutate(accurate = abs(Test_Data - Pred_Data))
table(testdf$accurate)
View(train_val)
names(train_val)
rpart.plot(Model_DT,extra =  3,fallen.leaves = T)
table(train_val$Pclass)
train_val%>%group_by(title, Pclass)%>%summarise(count = n())
table(train_val$Survived)
440+274
train_val%>%group_by(survived, Pclass, title)%>%summarise(count = n())
train_val%>%group_by(Survived, Pclass, title)%>%summarise(count = n())
View(train_val%>%group_by(Survived, Pclass, title)%>%summarise(count = n()))
View(train_val%>%group_by(Survived, Pclass, title, ticket.size)%>%summarise(count = n()))
View(train_val%>%group_by(Pclass, title)%>%summarise(count = n()))
View(train_val%>%group_by(Pclass, title, Survived)%>%summarise(count = n()))
?rpart.plot
Model_CDT$finalModel
View(train_val%>%group_by(Pclass, title, Survived)%>%summarise(count = n()))%>%filter(!title %in% c("Mr","Officer"))
View(train_val%>%
group_by(Pclass, title, Survived)%>%
summarise(count = n()))%>%
filter(title %in% c("Mr","Officer"))
View(train_val%>%group_by(Pclass, title, Survived)%>%summarise(count = n()))%>%filter(!title %in% c(Mr,Officer))
View(train_val%>%group_by(Pclass, title, Survived)%>%summarise(count = n()))%>%filter(title %in% c("Mr","Officer"))
table(train_val$Survived
)
