library(dplyr)
library(lubridate)
library(stringr)
PDR2015<-fread("C:/PDR_COPY/NFIRS Data/2015/basicincident.txt", sep="^", colClasses = c("ALARMS"="numeric"))
PDR2015F<-fread("C:/PDR_COPY/NFIRS Data/2015/fireincident.txt", sep="^")
PDR2014<-fread("C:/PDR_COPY/NFIRS Data/2014/basicincident.txt", sep="^", colClasses = c("ALARMS"="numeric"))
PDR2014F<-fread("C:/PDR_COPY/NFIRS Data/2014/fireincident.txt", sep="^")
PDR2013<-fread("C:/PDR_COPY/NFIRS Data/2013/basicincident.txt", sep="^", colClasses = c("ALARMS"="numeric"))
PDR2013F<-fread("C:/PDR_COPY/NFIRS Data/2013/fireincident.txt", sep="^")
PDR2012<-fread("C:/PDR_COPY/NFIRS Data/2012/basicincident.txt", sep="^", colClasses = c("ALARMS"="numeric"))
PDR2012F<-fread("C:/PDR_COPY/NFIRS Data/2012/fireincident.txt", sep="^")
PDR2011<-read.dbf("C:/PDR_COPY/NFIRS DATA/2011/basicincident.dbf")
PDR2011F<-read.dbf("C:/PDR_COPY/NFIRS DATA/2011/fireincident.dbf")
PDR<-rbind(PDR2011, PDR2012, PDR2013, PDR2014, PDR2015)
PDR2011$ALARM
PDR2011$ALARMS
PDR2015<-fread("C:/PDR_COPY/NFIRS Data/2015/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric"))
PDR2014<-fread("C:/PDR_COPY/NFIRS Data/2014/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric"))
PDR2013<-fread("C:/PDR_COPY/NFIRS Data/2013/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric"))
PDR2012<-fread("C:/PDR_COPY/NFIRS Data/2012/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric"))
PDR<-rbind(PDR2011, PDR2012, PDR2013, PDR2014, PDR2015)
class(PDR2015$ALARM)
class(PDR2011$ALARM)
lapply(PDR2015, class)
as.vector(lapply(PDR2015, class))
lapply(PDR2015, class)[1]
lapply(PDR2015, class)[]
unlist(lapply(PDR2015, class))
a<-unlist(lapply(PDR2015, class))
b<-unlist(lapply(PDR2011, class))
View(cbind(a,b))
a[1]
?read.dbf
PDR2015<-fread("C:/PDR_COPY/NFIRS Data/2015/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric"),stringsAsFactors = TRUE)
a<-unlist(lapply(PDR2015, class))
View(cbind(a,b))
PDR2015<-fread("C:/PDR_COPY/NFIRS Data/2015/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric", "ARRIVAL"="numeric","INC_COUNT" = "numeric","LU_CLEAR" = "numeric"),stringsAsFactors = TRUE)
PDR2015<-fread("C:/PDR_COPY/NFIRS Data/2015/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric", "ARRIVAL"="numeric","INC_CONT" = "numeric","LU_CLEAR" = "numeric"),stringsAsFactors = TRUE)
a<-unlist(lapply(PDR2015, class))
View(cbind(a,b))
PDR2015<-fread("C:/PDR_COPY/NFIRS Data/2015/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric", "ARRIVAL"="numeric","INC_CONT" = "numeric","LU_CLEAR" = "numeric"),stringsAsFactors = TRUE)
PDR2014<-fread("C:/PDR_COPY/NFIRS Data/2014/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric", "ARRIVAL"="numeric","INC_CONT" = "numeric","LU_CLEAR" = "numeric"),stringsAsFactors = TRUE)
PDR2013<-fread("C:/PDR_COPY/NFIRS Data/2013/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric", "ARRIVAL"="numeric","INC_CONT" = "numeric","LU_CLEAR" = "numeric"),stringsAsFactors = TRUE)
PDR2012<-fread("C:/PDR_COPY/NFIRS Data/2012/basicincident.txt", sep="^", colClasses = c("ALARM"="numeric", "ARRIVAL"="numeric","INC_CONT" = "numeric","LU_CLEAR" = "numeric"),stringsAsFactors = TRUE)
PDR<-rbind(PDR2011, PDR2012, PDR2013, PDR2014, PDR2015)
rm(c(PDR2011, PDR2012, PDR2013, PDR2014, PDR2015))
rm(PDR2011, PDR2012, PDR2013, PDR2014, PDR2015)
gc()
a<-unlist(lapply(PDR2015F, class))
b<-unlist(lapply(PDR2011F, class))
View(cbind(a,b))
PDR2015F<-fread("C:/PDR_COPY/NFIRS Data/2015/fireincident.txt", sep="^", stringsAsFactors = TRUE)
PDR2014F<-fread("C:/PDR_COPY/NFIRS Data/2014/fireincident.txt", sep="^", stringsAsFactors = TRUE)
PDR2013F<-fread("C:/PDR_COPY/NFIRS Data/2013/fireincident.txt", sep="^", stringsAsFactors = TRUE)
PDR2012F<-fread("C:/PDR_COPY/NFIRS Data/2012/fireincident.txt", sep="^", stringsAsFactors = TRUE)
PDRF<-rbind(PDR2011F, PDR2012F, PDR2013F, PDR2014F, PDR2015F)
rm(PDR2011F, PDR2012F, PDR2013F, PDR2014F, PDR2015F)
gc()
#Excludes confied fires.
PDR<-PDR%>%filter(as.numeric(as.character(INC_TYPE))>=100
, as.numeric(as.character(INC_TYPE))<=123
, !as.numeric(as.character(INC_TYPE)) %in% c(113,114,115,116,117,118)
, !is.na(STATE)
, AID == '1'
| AID == '2'
| AID == 'N')
PDRID<-paste0(
str_pad(PDR$STATE, max(str_length(PDR$STATE),na.rm = TRUE),"left","0"),
str_pad(PDR$FDID, max(str_length(PDR$FDID),na.rm = TRUE),"left","0"),
str_pad(PDR$INC_DATE, max(str_length(PDR$INC_DATE),na.rm = TRUE),"left","0"),
str_pad(PDR$INC_NO, max(str_length(PDR$INC_NO),na.rm = TRUE),"left","0"),
str_pad(PDR$EXP_NO, max(str_length(PDR$EXP_NO),na.rm = TRUE),"left","0"))
PDR2015<-cbind(PDRID,PDR)
rm(PDR2015)
PDR<-cbind(PDRID,PDR)
PDRIDF<-paste0(
str_pad(PDRF$STATE, max(str_length(PDRF$STATE),na.rm = TRUE),"left","0"),
str_pad(PDRF$FDID, max(str_length(PDRF$FDID),na.rm = TRUE),"left","0"),
str_pad(PDRF$INC_DATE, max(str_length(PDRF$INC_DATE),na.rm = TRUE),"left","0"),
str_pad(PDRF$INC_NO, max(str_length(PDRF$INC_NO),na.rm = TRUE),"left","0"),
str_pad(PDRF$EXP_NO, max(str_length(PDRF$EXP_NO),na.rm = TRUE),"left","0"))
PDRF<-cbind(PDRIDF,PDRF)
PDR<-PDR%>%filter(as.numeric(as.character(INC_TYPE))>=100
, as.numeric(as.character(INC_TYPE))<=123
, !as.numeric(as.character(INC_TYPE)) %in% c(113,114,115,116,117,118)
, !is.na(STATE)
, AID == '1'
| AID == '2'
| AID == 'N')
nrows(PDR)
nrow(PDR)
gc()
Big15<-inner_join(PDR2015,PDR2015F, by=c("PDRID"="PDRIDF"))
Big15<-inner_join(PDR,PDRF, by=c("PDRID"="PDRIDF"))
head(PDR$PDRID)
class(PDR$PDRID)
class(PDRF$PDRIDF)
PDR$PDRID<-as.character(PDR$PDRID)
class(PDRF$PDRIDF)
Big15<-inner_join(PDR,PDRF, by=c("PDRID"="PDRIDF"))
head(Big15)
head(PDR$PDRID
)
head(PDRF$PDRIDF)
max(str_length(PDR$STATE),na.rm = TRUE)
max(str_length(PDR$FDID),na.rm = TRUE)
max(str_length(PDR$INC_DATE),na.rm = TRUE)
max(str_length(PDR$INC_NO),na.rm = TRUE)
max(str_length(PDR$EXP_NO),na.rm = TRUE)
max(str_length(PDRF$STATE)
)
max(str_length(PDRF$STATE),na.rm = TRUE)
max(str_length(PDRF$FDID),na.rm = TRUE)
max(str_length(PDRF$INC_DATE),na.rm = TRUE)
max(str_length(PDRF$INC_NO),na.rm = TRUE)
max(str_length(PDRF$EXP_NO),na.rm = TRUE)
PDRF[str_length(PDRF$EXP_NO)==6,]
PDRF[-str_length(PDRF$EXP_NO)==6,]
PDRF[-c(str_length(PDRF$EXP_NO)==6),]
PDRF<-PDRF[-c(str_length(PDRF$EXP_NO)==6),]
PDRF<-PDRF[str_length(PDRF$EXP_NO)!=6,]
Big15<-inner_join(PDR,PDRF, by=c("PDRID"="PDRIDF"))
nrow(Big15)
head(PDRF)
max(str_length(PDRF$PDRIDF))
max(str_length(PDR$PDRID))
PDRF<-PDRF[,-c("PDRIDF")]
PDRF<-PDRF[str_length(PDRF$EXP_NO)!=6,]
PDRIDF<-paste0(
str_pad(PDRF$STATE, max(str_length(PDRF$STATE),na.rm = TRUE),"left","0"),
str_pad(PDRF$FDID, max(str_length(PDRF$FDID),na.rm = TRUE),"left","0"),
str_pad(PDRF$INC_DATE, max(str_length(PDRF$INC_DATE),na.rm = TRUE),"left","0"),
str_pad(PDRF$INC_NO, max(str_length(PDRF$INC_NO),na.rm = TRUE),"left","0"),
str_pad(PDRF$EXP_NO, max(str_length(PDRF$EXP_NO),na.rm = TRUE),"left","0"))
max(PDRIDF)
max(str_length(PDRIDF))
PDRF<-cbind(PDRIDF,PDRF)
n
Big15<-inner_join(PDR,PDRF, by=c("PDRID"="PDRIDF"))
View(head(Big15))
table(Big15$INC_TYPE)
?inner_join
Big15$INC_DATE.x
substr(Big15$INC_DATE.x ,str_length(Big15$INC_DATE.x)-2,2)
substr(Big15$INC_DATE.x ,str_length(Big15$INC_DATE.x)-2,str_length(Big15$INC_DATE.x))
substr(Big15$INC_DATE.x ,str_length(Big15$INC_DATE.x)-1,str_length(Big15$INC_DATE.x))
as.numeric(substr(Big15$INC_DATE.x ,str_length(Big15$INC_DATE.x)-2,2))
Big15[substr(Big15$INC_DATE.x ,str_length(Big15$INC_DATE.x)-2,2) == "11","INC_TYPE"]
table(Big15[substr(Big15$INC_DATE.x ,str_length(Big15$INC_DATE.x)-2,2) == "11","INC_TYPE"])
table(Big15[substr(Big15$INC_DATE.x ,str_length(Big15$INC_DATE.x)-2,str_length(Big15$INC_DATE.x)) == "11","INC_TYPE"])
table(Big15[substr(Big15$INC_DATE.x ,str_length(Big15$INC_DATE.x)-2,str_length(Big15$INC_DATE.x)) == "11",])
sub_str(Big15$INC_DATE.x,-2,0)
str_sub(Big15$INC_DATE.x,-2,0)
str_sub(Big15$INC_DATE.x,-2,-1)
as.integer(str_sub(Big15$INC_DATE.x,-2,-1))
Big15$yr<-as.integer(str_sub(Big15$INC_DATE.x,-2,-1))
Big15%>%filter(INC_TYPE=='110')%>%group_by(yr)%>%summarise(n=n())
Big15%>%filter(INC_TYPE=='110')%>%group_by(yr, STATE.x)%>%summarise(n=n())
View(Big15%>%filter(INC_TYPE=='110')%>%group_by(yr, STATE.x)%>%summarise(n=n()))
View(Big15%>%filter(INC_TYPE=='110')%>%group_by(yr, STATE.x, VERSION.x)%>%summarise(n=n()))
Big15<-Big15%>%filter(as.numeric(as.character(INC_TYPE))>=110
)
table(Big15$INC_TYPE)
#https://www.kaggle.com/hiteshp/head-start-for-data-scientist
setwd("C:/KaggleTest")
source("Install.R")
source("readPDR2018.R")
Install(c(
#Data Wrangling
"tidyverse",
"forcats",
"stringr",
"caTools",
#data assessment/visualizations
"DT",
"data.table",
"pander",
"ggplot2",
"scales",
"grid",
"gridExtra",
"corrplot",
"VIM",
"knitr",
"vcd",
"caret",
#model
"xgboost",
"MLmetrics",
"randomForest",
"rpart",
"rpart.plot",
"car",
"e1071",
"ROCR",
"pROC",
#"glemnet",
#other
"lubridate",
"openxlsx",
"arm"))
PDR<-fread("PDR_Filtered.txt")
mlds<-PDR
rm(PDR)
gc()
#Remove missing or outlaying values
mlds<-mlds%>%filter(mlds$PROP_LOSS>0 &
mlds$PROP_LOSS< 1000000 &
!is.na(mlds$PROP_LOSS) &
mlds$PROP_VAL > 20000 &
mlds$PROP_VAL < 1000000 &
!is.na(mlds$CAUSE_CODE) &
mlds$GSM_FLAG == 0 &
year != 2018 &
mlds$PROP_USE >=400 &
mlds$PROP_USE< 500,
mlds$RT<86400
#testing
#mlds$CAUSE_CODE!= 13
)
mlds<-mlds%>%select(month,
STATE,
weekday,
hour,
week,
RT,
PROP_LOSS,
PROP_VAL,
CAUSE_CODE,
FIRST_IGN,
AREA_ORIG,
HEAT_SOURC,
OTH_DEATH,
PROP_USE,
ALARMS,
INC_TYPE,
HUM_FAC_1)
mlds<-mlds%>%dplyr::select(month,
STATE,
weekday,
hour,
week,
RT,
PROP_LOSS,
PROP_VAL,
CAUSE_CODE,
FIRST_IGN,
AREA_ORIG,
HEAT_SOURC,
OTH_DEATH,
PROP_USE,
ALARMS,
INC_TYPE,
HUM_FAC_1)
mlds<-mlds%>%mutate(ALARMS_YN=case_when(is.na(ALARMS) ~ "O",
ALARMS == 0 ~ "N",
ALARMS >0 ~ "Y"))
mlds$ALARMS_YN<-factor(mlds$ALARMS_YN)
mlds<-mlds%>%select(-ALARMS)
mlds<-mlds%>%dplyr::select(-ALARMS)
mlds<-mlds[complete.cases(mlds),]
#Add Percentage Loss
mlds<-mlds%>%mutate(percloss=mlds$PROP_LOSS/mlds$PROP_VAL)
mlds<-mlds%>%mutate(losscat=case_when(percloss < .10 ~ "Minor_Loss",
percloss >= .10 & percloss <.50 ~ "Med_Loss",
percloss >=.50 & percloss < 1 ~ "Major_Loss",
percloss == 1.00 ~ "Total_Loss"))
mlds$losscat<-factor(mlds$losscat,ordered = FALSE, levels = c("Minor_Loss","Med_Loss","Major_Loss","Total_Loss"))
#convert everything to factors.
mlds$month<-factor(mlds$month)
mlds$weekday<-factor(mlds$weekday)
mlds$hour<-as.numeric(as.character(mlds$hour))
mlds<-mlds%>%mutate(daycat=case_when(hour >= 5 & hour < 11 ~ "Morning",
hour >= 11 & hour < 13 ~ "Mid-Day",
hour >= 13 & hour < 18 ~ "Aft-Noon",
hour >= 18 & hour < 21 ~ "Evening",
hour >= 21 & hour < 24 ~ "Night",
hour >= 0 & hour < 5 ~ "Night"))
mlds$hour<-factor(mlds$hour)
mlds$daycat<-factor(mlds$daycat)
#mlds$RT<- hms(mlds$RT)
mlds$RT<-as.numeric(mlds$RT)
mlds$CAUSE_CODE<-factor(mlds$CAUSE_CODE)
mlds$FIRST_IGN<-factor(mlds$FIRST_IGN)
mlds$AREA_ORIG<-factor(mlds$AREA_ORIG)
mlds$HEAT_SOURC<-factor(mlds$HEAT_SOURC)
mlds$INC_TYPE<-factor(mlds$INC_TYPE)
mlds<-mlds%>%mutate(Fatality=case_when(Fatality = mlds$OTH_DEATH > 0 ~ "1",
mlds$OTH_DEATH == 0 ~ "0"))
mlds$Fatality<-factor(mlds$Fatality)
mlds$PROP_USE<-factor(mlds$PROP_USE)
fml<-mlds%>%dplyr::select(-PROP_LOSS,-PROP_VAL, -OTH_DEATH,-percloss, -hour, week)
fml$AREA_ORIG<-as.character(fml$AREA_ORIG)
df<-as.data.frame(table(fml$AREA_ORIG))%>%arrange(desc(Freq))
fml<-fml%>%mutate(AOO=case_when(!AREA_ORIG %in% df$Var1[1:10] ~ "Other",
TRUE ~ AREA_ORIG))
fml$AREA_ORIG<-fml$AOO
fml$AREA_ORIG<-factor(fml$AREA_ORIG)
fml<-fml%>%dplyr::select(-AOO)
fml$FIRST_IGN<-as.character(fml$FIRST_IGN)
df<-as.data.frame(table(fml$FIRST_IGN))%>%arrange(desc(Freq))
fml<-fml%>%mutate(AOO=case_when(!FIRST_IGN %in% df$Var1[1:10] ~ "Other",
TRUE ~ FIRST_IGN))
fml$FIRST_IGN<-fml$AOO
fml$FIRST_IGN<-factor(fml$FIRST_IGN)
fml<-fml%>%dplyr::select(-AOO)
fml$HEAT_SOURC<-as.character(fml$HEAT_SOURC)
df<-as.data.frame(table(fml$HEAT_SOURC))%>%arrange(desc(Freq))
fml<-fml%>%mutate(AOO=case_when(!HEAT_SOURC %in% df$Var1[1:10] ~ "Other",
TRUE ~ HEAT_SOURC))
fml$HEAT_SOURC<-fml$AOO
fml$HEAT_SOURC<-factor(fml$HEAT_SOURC)
fml<-fml%>%dplyr::select(-AOO)
fml<-fml%>%dplyr::select(-STATE)
fml<-fml%>%dplyr::select(-PROP_USE)
fml<-fml%>%dplyr::select(-ALARMS)
fml<-fml%>%dplyr::select(-week)
set.seed(500)
ind=createDataPartition(fml$Fatality,times=1,p=0.6,list=FALSE)
train_val=fml[ind,]
test_val=fml[-ind,]
rf.mod<- randomForest(Fatality ~ ., norm.votes = TRUE, proximity = TRUE, data = train_val, ntree = 500)
rf.mod<- randomForest(Fatality ~ ., norm.votes = TRUE, proximity = TRUE, data = train_val, ntree = 500, nodesize = 3)
rf.mod<- randomForest(Fatality ~ ., norm.votes = TRUE, proximity = TRUE, data = train_val, ntree = 500, nodesize = 10)
rf.mod<- randomForest(Fatality ~ ., norm.votes = TRUE, proximity = TRUE, data = train_val, ntree = 300, nodesize = 10)
log.mod <- glm(Fatality ~ ., family = binomial(link=logit)
, data = train_val)
summary(log.mod)
unique(fml$month)
View(data.frame(fml$month, as.character(fml$month), as.integer(fml$month)))
train_val2<-train_val[,!names(train_val) %in% c("INC_TYPE","weekday","ALARMS_YN","RT")]
rf.mod<- randomForest(Fatality ~ ., norm.votes = TRUE, proximity = TRUE, data = train_val2, ntree = 500)
names(train_val2)
rf.mod<- randomForest(Fatality ~ ., norm.votes = TRUE, proximity = TRUE, data = train_val2, ntree = 250)
rf.mod<- randomForest(Fatality ~ ., norm.votes = TRUE, proximity = TRUE, data = train_val2, ntree = 25)
rf.mod<- randomForest(Fatality ~ ., norm.votes = TRUE, proximity = TRUE, data = train_val2, ntree = 2)
rf.mod<- randomForest(Fatality ~ ., norm.votes = TRUE, proximity = TRUE, data = train_val2[1:10,], ntree = 2)
rf.mod<- randomForest(Fatality ~ ., norm.votes = TRUE, proximity = TRUE, data = train_val2[1:100,], ntree = 2)
names(train_val2)
rf.mod<- randomForest(x = train_val2[, -9],y = train_val2[, 9],norm.votes = TRUE, proximity = TRUE, data = train_val2[1:100,], ntree = 2)
rf.mod<- randomForest(x = train_val2[, -9],y = train_val2[, 9],norm.votes = TRUE, proximity = TRUE, ntree = 2)
rf.mod<- randomForest(x = train_val2[1:100, -9],y = train_val2[1:100, 9],norm.votes = TRUE, proximity = TRUE, ntree = 2)
# fat<-mlds[mlds$OTH_DEATH > 0,]
#
# lapply(fat, function(x) length(unique(x)))
# missing_values2<-fat%>%summarise_all(funs(sum(is.na(.))/n()))
#
# missing_values2 <- gather(missing_values2, key="feature", value="missing_pct")
#
#
# #Useful data quality function for missing values
#
checkColumn = function(df,colname){
testData = df[[colname]]
numMissing = max(sum(is.na(testData)|is.nan(testData)|testData==''),0)
if (class(testData) == 'numeric' | class(testData) == 'Date' | class(testData) == 'difftime' | class(testData) == 'integer'){
list('col' = colname,'class' = class(testData), 'num' = length(testData) - numMissing, 'numMissing' = numMissing, 'numInfinite' = sum(is.infinite(testData)), 'avgVal' = mean(testData,na.rm=TRUE), 'minVal' = round(min(testData,na.rm = TRUE)), 'maxVal' = round(max(testData,na.rm = TRUE)))
} else{
list('col' = colname,'class' = class(testData), 'num' = length(testData) - numMissing, 'numMissing' = numMissing, 'numInfinite' = NA,  'avgVal' = NA, 'minVal' = NA, 'maxVal' = NA)
}
}
checkAllCols = function(train_val2){
resDF = data.frame()
for (colName in names(df)){
resDF = rbind(resDF,as.data.frame(checkColumn(df=df,colname=colName)))
}
resDF
}
# fat<-mlds[mlds$OTH_DEATH > 0,]
#
# lapply(fat, function(x) length(unique(x)))
# missing_values2<-fat%>%summarise_all(funs(sum(is.na(.))/n()))
#
# missing_values2 <- gather(missing_values2, key="feature", value="missing_pct")
#
#
# #Useful data quality function for missing values
#
checkColumn = function(df,colname){
testData = df[[colname]]
numMissing = max(sum(is.na(testData)|is.nan(testData)|testData==''),0)
if (class(testData) == 'numeric' | class(testData) == 'Date' | class(testData) == 'difftime' | class(testData) == 'integer'){
list('col' = colname,'class' = class(testData), 'num' = length(testData) - numMissing, 'numMissing' = numMissing, 'numInfinite' = sum(is.infinite(testData)), 'avgVal' = mean(testData,na.rm=TRUE), 'minVal' = round(min(testData,na.rm = TRUE)), 'maxVal' = round(max(testData,na.rm = TRUE)))
} else{
list('col' = colname,'class' = class(testData), 'num' = length(testData) - numMissing, 'numMissing' = numMissing, 'numInfinite' = NA,  'avgVal' = NA, 'minVal' = NA, 'maxVal' = NA)
}
}
checkAllCols = function(train_val2){
resDF = data.frame()
for (colName in names(df)){
resDF = rbind(resDF,as.data.frame(checkColumn(df=df,colname=colName)))
}
resDF
}
#
#
datatable(checkAllCols(mlds), style="bootstrap", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))
# fat<-mlds[mlds$OTH_DEATH > 0,]
#
# lapply(fat, function(x) length(unique(x)))
# missing_values2<-fat%>%summarise_all(funs(sum(is.na(.))/n()))
#
# missing_values2 <- gather(missing_values2, key="feature", value="missing_pct")
#
#
# #Useful data quality function for missing values
#
checkColumn = function(df,colname){
testData = df[[colname]]
numMissing = max(sum(is.na(testData)|is.nan(testData)|testData==''),0)
if (class(testData) == 'numeric' | class(testData) == 'Date' | class(testData) == 'difftime' | class(testData) == 'integer'){
list('col' = colname,'class' = class(testData), 'num' = length(testData) - numMissing, 'numMissing' = numMissing, 'numInfinite' = sum(is.infinite(testData)), 'avgVal' = mean(testData,na.rm=TRUE), 'minVal' = round(min(testData,na.rm = TRUE)), 'maxVal' = round(max(testData,na.rm = TRUE)))
} else{
list('col' = colname,'class' = class(testData), 'num' = length(testData) - numMissing, 'numMissing' = numMissing, 'numInfinite' = NA,  'avgVal' = NA, 'minVal' = NA, 'maxVal' = NA)
}
}
checkAllCols = function(df){
resDF = data.frame()
for (colName in names(df)){
resDF = rbind(resDF,as.data.frame(checkColumn(df=df,colname=colName)))
}
resDF
}
#
#
datatable(checkAllCols(train_val2), style="bootstrap", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))
table(train_val)
table(train_val$HUM_FAC_1)
mlds[is.na(mlds$HUM_FAC_1),"HUM_FAC_1"]
mlds[is.na(mlds$HUM_FAC_1),]
table(mlds$HUM_FAC_1)
table(is.na(mlds$HUM_FAC_1))
View(mlds)
table(mlds$HUM_FAC_1=="")
mlds[mlds$HUM_FAC_1=="","HUM_FAC_1"]
mlds[mlds$HUM_FAC_1=="","HUM_FAC_1"]<-"N"
table(mlds$HUM_FAC_1)
fml$AREA_ORIG<-as.character(fml$AREA_ORIG)
df<-as.data.frame(table(fml$AREA_ORIG))%>%arrange(desc(Freq))
fml<-fml%>%mutate(AOO=case_when(!AREA_ORIG %in% df$Var1[1:10] ~ "Other",
TRUE ~ AREA_ORIG))
fml$AREA_ORIG<-fml$AOO
fml$AREA_ORIG<-factor(fml$AREA_ORIG)
fml<-fml%>%dplyr::select(-AOO)
fml$FIRST_IGN<-as.character(fml$FIRST_IGN)
df<-as.data.frame(table(fml$FIRST_IGN))%>%arrange(desc(Freq))
fml<-fml%>%mutate(AOO=case_when(!FIRST_IGN %in% df$Var1[1:10] ~ "Other",
TRUE ~ FIRST_IGN))
fml$FIRST_IGN<-fml$AOO
fml$FIRST_IGN<-factor(fml$FIRST_IGN)
fml<-fml%>%dplyr::select(-AOO)
fml$HEAT_SOURC<-as.character(fml$HEAT_SOURC)
df<-as.data.frame(table(fml$HEAT_SOURC))%>%arrange(desc(Freq))
fml<-fml%>%mutate(AOO=case_when(!HEAT_SOURC %in% df$Var1[1:10] ~ "Other",
TRUE ~ HEAT_SOURC))
fml$HEAT_SOURC<-fml$AOO
fml$HEAT_SOURC<-factor(fml$HEAT_SOURC)
fml<-fml%>%dplyr::select(-AOO)
fml<-fml%>%dplyr::select(-STATE)
fml<-fml%>%dplyr::select(-PROP_USE)
fml<-fml%>%dplyr::select(-ALARMS)
fml<-fml%>%dplyr::select(-week)
set.seed(500)
ind=createDataPartition(fml$Fatality,times=1,p=0.6,list=FALSE)
train_val=fml[ind,]
test_val=fml[-ind,]
table(train_val$HUM_FAC_1)
fml<-mlds%>%dplyr::select(-PROP_LOSS,-PROP_VAL, -OTH_DEATH,-percloss, -hour, week)
fml$AREA_ORIG<-as.character(fml$AREA_ORIG)
df<-as.data.frame(table(fml$AREA_ORIG))%>%arrange(desc(Freq))
fml<-fml%>%mutate(AOO=case_when(!AREA_ORIG %in% df$Var1[1:10] ~ "Other",
TRUE ~ AREA_ORIG))
fml$AREA_ORIG<-fml$AOO
fml$AREA_ORIG<-factor(fml$AREA_ORIG)
fml<-fml%>%dplyr::select(-AOO)
fml$FIRST_IGN<-as.character(fml$FIRST_IGN)
df<-as.data.frame(table(fml$FIRST_IGN))%>%arrange(desc(Freq))
fml<-fml%>%mutate(AOO=case_when(!FIRST_IGN %in% df$Var1[1:10] ~ "Other",
TRUE ~ FIRST_IGN))
fml$FIRST_IGN<-fml$AOO
fml$FIRST_IGN<-factor(fml$FIRST_IGN)
fml<-fml%>%dplyr::select(-AOO)
fml$HEAT_SOURC<-as.character(fml$HEAT_SOURC)
df<-as.data.frame(table(fml$HEAT_SOURC))%>%arrange(desc(Freq))
fml<-fml%>%mutate(AOO=case_when(!HEAT_SOURC %in% df$Var1[1:10] ~ "Other",
TRUE ~ HEAT_SOURC))
fml$HEAT_SOURC<-fml$AOO
fml$HEAT_SOURC<-factor(fml$HEAT_SOURC)
fml<-fml%>%dplyr::select(-AOO)
fml<-fml%>%dplyr::select(-STATE)
fml<-fml%>%dplyr::select(-PROP_USE)
fml<-fml%>%dplyr::select(-ALARMS)
fml<-fml%>%dplyr::select(-week)
set.seed(500)
ind=createDataPartition(fml$Fatality,times=1,p=0.6,list=FALSE)
train_val=fml[ind,]
test_val=fml[-ind,]
rf.mod<- randomForest(x = train_val2[1:100, -9],y = train_val2[1:100, 9],norm.votes = TRUE, proximity = TRUE, ntree = 2)
train_val2<-train_val[,!names(train_val) %in% c("INC_TYPE","weekday","ALARMS_YN","RT")]
rf.mod<- randomForest(x = train_val2[1:100, -9],y = train_val2[1:100, 9],norm.votes = TRUE, proximity = TRUE, ntree = 2)
table(train_val2$HUM_FAC_1)
rf.mod<- randomForest(x = train_val2[1:10000, -9],y = train_val2[1:10000, 9],norm.votes = TRUE, proximity = TRUE, ntree = 2)
train_val2[1:10000, 9]
rf.mod<- randomForest(x = train_val2[1:10000, -9],y = train_val2[1:10000, 9],norm.votes = TRUE, proximity = TRUE, ntree = 500)
?randomForest
rf.mod<- randomForest(x = train_val2[1:10000, -9],y = train_val2[1:10000, 9],norm.votes = TRUE, proximity = FALSE, ntree = 500)
rf.mod<- randomForest(x = train_val2[1:10000, -9],y = train_val2[1:10000, 9],ntree = 500)
lapply(train_val2, class)
fml$HUM_FAC_1<-factor(fml$HUM_FAC_1)
rf.mod<- randomForest(x = train_val2[1:10000, -9],y = train_val2[1:10000, 9],ntree = 500)
train_val2$HUM_FAC_1<-factor(train_val2$HUM_FAC_1)
rf.mod<- randomForest(x = train_val2[1:10000, -9],y = train_val2[1:10000, 9],ntree = 500)
